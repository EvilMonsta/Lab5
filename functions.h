#include "structures.h"
#include <stdint.h>
int TaskNumCheck(int tasknum);
int checkInt();
float checkFloat();
int ContinueWish(int tasknumber);
void WordCancellation(char*str, int len);
TreeNode* insertNode(TreeNode *root, Car *newModel);
TreeNode * writeDataFromFile();
void freeModel(Car *carModel);
void freeTree(TreeNode *root);
int findStringNumber(FILE *taskFile, char* buffer);
void readFromStrToStruct(char*string, Car* newModel);
void enterEq(Car* carModel, int oldCount);
Car* findCar(TreeNode *rootNode, char*model);
void writeTreeToFile(TreeNode *rootNode, FILE* file);
void writeToFile(TreeNode *rootNode);
TreeNode * addNewCar(TreeNode *rootNode);
TreeNode* delete(TreeNode* rootNode);
TreeNode *deleteCar(TreeNode *root);
TreeNode *findAndDelete(TreeNode* rootNode, char* searchingModel);
TreeNode *search(TreeNode* rootNode, char* searchingModel);
void printTree(TreeNode *rootNode, int level);
void printTreeList(TreeNode *root);
BodyType *createList(TreeNode *rootNode, BodyType *list, int *typesNum);
void fillList(TreeNode *rootNode, BodyType* list, int *typesNum);
void bubbleSort(BodyType* list, int typesNum);
void printList(BodyType* list, int typesNum);
int findMinLifeCycle(TreeNode *rootNode, int *minLifeCycle);
TreeNode *findAndDeleteByMinCycle(TreeNode *rootNode, int minLifeCycle);
TreeNode *deleteWithMinCycle(TreeNode *rootNode);
char* modelInput();
void printCar(TreeNode *model);
void findCarByName(TreeNode *rootNode);
float findAverageCapacity(Car* carModel);
unsigned int hash(float value);
HashMap* createHashMap(int startSize);
void resizeHashMap(HashMap* hashMap);
void addModel(HashMap* hashMap, Car* carModel);
void addNewModel(HashMap* hashMap);
void deleteModel(HashMap* hashMap, float avCap);
void printAverageCapList(HashMap* hashMap);
void destroyCar(HashMap* hashMap);
void readDataFromFile(HashMap* hashMap);
void printHashMap(HashMap* hashMap);
void clearHashMap(HashMap* hashMap);
BodyType* fillListHash(HashMap* hashMap, BodyType* list, int *typesNum);
BodyType *createListHash(HashMap* hashMap, BodyType *list, int *typesNum);
void deleteWithMinCycleHash(HashMap* hashMap);
void printModel(Node* nodeToPrint);
void findAndPrintModel(HashMap* hashMap, float avCap);
void findByAverageCapacity(HashMap* hashMap);
void writeHashToFile(HashMap* hashMap, FILE* file);
void writeDataToFile(HashMap* hashMap);